import textwrap
import logging
import requests
import telegram
import os
from dotenv import load_dotenv
from time import sleep

URL = 'https://dvmn.org/api/long_polling/'


class TelegramLogsHandler(logging.Handler):
    def __init__(self, tg_bot, chat_id):
        super().__init__()
        self.chat_id = chat_id
        self.tg_bot = tg_bot

    def emit(self, record):
        log_entry = self.format(record)
        try:
            self.tg_bot.send_message(chat_id=self.chat_id, text=log_entry)
        except Exception:
            pass


def main():
    load_dotenv()
    devman_token = os.environ['DEVMAN_TOKEN']
    bot_token = os.environ['TG_BOT_TOKEN']
    chat_id = os.environ['CHAT_ID']

    bot = telegram.Bot(token=bot_token)

    logger = logging.getLogger('DevmanBot')
    logger.setLevel(logging.INFO)

    file_handler = logging.FileHandler('/opt/devman/DevmanCheckBot/bot.log')
    file_handler.setFormatter(logging.Formatter('%(asctime)s - %(levelname)s - %(message)s'))
    logger.addHandler(file_handler)

    tg_handler = TelegramLogsHandler(bot, chat_id)
    tg_handler.setFormatter(logging.Formatter('%(asctime)s - %(levelname)s - %(message)s'))
    logger.addHandler(tg_handler)

    logger.info('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ.')

    headers = {'Authorization': f'Token {devman_token}'}
    timestamp = ''

    while True:
        try:
            response = requests.get(URL, headers=headers, params={"timestamp": timestamp}, timeout=90)
            response.raise_for_status()
            check_results = response.json()

            if check_results["status"] == "timeout":
                timestamp = check_results["timestamp_to_request"]
                continue

            attempt = check_results["new_attempts"][0]
            timestamp = attempt["timestamp"]
            lesson_title = attempt["lesson_title"]
            lesson_url = attempt["lesson_url"]
            is_negative = attempt["is_negative"]

            if is_negative:
                text = textwrap.dedent(f"""
                    –£ –≤–∞—Å –ø—Ä–æ–≤–µ—Ä–∏–ª–∏ —Ä–∞–±–æ—Ç—É ¬´{lesson_title}¬ª üòû
                    –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ —Ä–∞–±–æ—Ç–µ –Ω–∞—à–ª–∏—Å—å –æ—à–∏–±–∫–∏.
                    –°—Å—ã–ª–∫–∞ –Ω–∞ —É—Ä–æ–∫: {lesson_url}
                """)
            else:
                text = textwrap.dedent(f"""
                    –£ –≤–∞—Å –ø—Ä–æ–≤–µ—Ä–∏–ª–∏ —Ä–∞–±–æ—Ç—É ¬´{lesson_title}¬ª üéâ
                    –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –æ–¥–æ–±—Ä–∏–ª —Ä–∞–±–æ—Ç—É! –ú–æ–∂–Ω–æ –ø—Ä–∏—Å—Ç—É–ø–∞—Ç—å –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É—Ä–æ–∫—É.
                    –°—Å—ã–ª–∫–∞ –Ω–∞ —É—Ä–æ–∫: {lesson_url}
                """)

            bot.send_message(chat_id=chat_id, text=text.strip())

        except requests.exceptions.ConnectionError:
            logger.warning('–ü—Ä–æ–±–ª–µ–º–∞ —Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º. –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥...')
            sleep(10)
        except requests.exceptions.ReadTimeout:
            pass
        except Exception as err:
            logger.exception(f'–ë–æ—Ç —É–ø–∞–ª —Å –æ—à–∏–±–∫–æ–π: {err}')


if __name__ == "__main__":
    main()
